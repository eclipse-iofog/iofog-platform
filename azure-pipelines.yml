trigger:
  branches:
    include:
      - develop
      - fix-pipeline
  paths:
    exclude:
      - README.md

pr: none

schedules:
- cron: '0 1,14,19 * * *'
  displayName: Daily build 7am, 12pm and 6pm PST
  branches:
    include:
      - develop
  always: true

variables:
  group: 'pipelines'

jobs:
  - job: Demo
    dependsOn: Platform
    pool: server

    steps:
      - task: InvokeRESTAPI@1
        displayName: 'trigger product demo job'
        inputs:
          connectionType: 'connectedServiceName'
          serviceConnection: 'Pipelines'
          method: 'POST'
          urlSuffix: '/edgeworx/_apis/build/builds?api-version=5.0'
          body: "{\"Definition\":{\"id\":\"24\"}}"

  - job: Platform
    pool:
      vmImage: 'Ubuntu-16.04'

    steps:
      - task: DownloadSecureFile@1
        displayName: 'Download secure file for azure to access gcp'
        inputs:
          secureFile: 'azure-gcp.json'

      - task: DownloadSecureFile@1
        displayName: 'Download packet token for terraform'
        inputs:
          secureFile: packet.token

      - task: DownloadSecureFile@1
        displayName: 'Download secure file for ssh access for agents'
        inputs:
          secureFile: 'azure_ssh_key'

      - task: DownloadSecureFile@1
        displayName: 'Download terraform vars file for develop'
        inputs:
          secureFile: develop.tfvars

      - script: |
          echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          sudo apt-get update && sudo apt-get install google-cloud-sdk

          gcloud --quiet auth activate-service-account --key-file=$(Agent.TempDirectory)/azure-gcp.json
          gcloud --quiet config set project focal-freedom-236620

          # set env var GOOGLE_APPLICATION_CREDENTIALS for terraform to pick up for GCP authentication
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(Agent.TempDirectory)/azure-gcp.json"

          echo "##vso[task.setvariable variable=PACKET_AUTH_TOKEN]$(cat $(Agent.TempDirectory)/packet.token)"
        displayName: 'Install and init gcloud'

      - script: |
          curl -s https://$(iofogctlPackageCloudToken):@packagecloud.io/install/repositories/iofog/iofogctl-snapshots/script.deb.sh | sudo bash
          # install iofogctl version set in pipeline variable
          sudo apt-get install iofogctl=$(iofogctl_version)
          iofogctl version
        displayName: 'Install iofogctl'

      - script: |
          sudo add-apt-repository ppa:rmescandon/yq
          sudo apt update
          sudo apt install yq -y
        displayName: 'Install yq'

      - script: |
          cp $(Agent.TempDirectory)/packet.token $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/packet.token
          cp $(Agent.TempDirectory)/azure_ssh_key ~/azure_ssh_key
          chmod 400 ~/azure_ssh_key
        displayName: 'Copy secret files'

      - script: |
          wget https://releases.hashicorp.com/terraform/0.11.14/terraform_0.11.14_linux_amd64.zip
          unzip terraform_0.11.14_linux_amd64.zip
          sudo mv terraform /usr/local/bin/terraform
        displayName: 'Install terraform'
        workingDirectory: $(Agent.TempDirectory)

      - script: |
          terraform init
        displayName: 'Init terraform'
        workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop

      - script: |
          export PACKET_AUTH_TOKEN=$(cat ../packet.token)
          terraform destroy -var-file=$(Agent.TempDirectory)/develop.tfvars -auto-approve
        displayName: 'Destroy existing infrastructure'
        continueOnError: 'true'
        workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop
        # condition: and(always(), eq(variables['Build.Reason'], 'Schedule'))

      - script: |
          export PACKET_AUTH_TOKEN=$(cat ../packet.token)
          terraform apply -var-file=$(Agent.TempDirectory)/develop.tfvars \
                          -var 'controller_image=$(controller_image)' \
                          -var 'connector_image=$(connector_image)' \
                          -var 'operator_image=$(operator_image)' \
                          -var 'kubelet_image=$(kubelet_image)' \
                          -var 'agent_repo=$(tf_agent_repo)' \
                          -var 'agent_version=$(tf_agent_version)' -auto-approve
          echo
          echo "Resources deployed:"
          echo
          kubectl get all -n iofog -o wide
        displayName: 'Deploy infrastructure'
        workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop
        env:
          PACKAGE_CLOUD_TOKEN: $(agentPackageCloudToken)
        continueOnError: 'true'

      - script: |
          cat iofogctl_inventory.yaml
          mkdir "$(Agent.TempDirectory)/test-results"

          CONTROLLER_IP=$(sed -n 's/.*kubecontrollerip: "\([0-9.]*\)"/\1/p' iofogctl_inventory.yaml)
          AGENT_USER=$(yq r iofogctl_inventory.yaml 'agents[0].user')
          AGENT_HOST=$(yq r iofogctl_inventory.yaml 'agents[0].host')
          AGENT_PORT=$(yq r iofogctl_inventory.yaml 'agents[0].port')
          CONTROLLER_EMAIL=$(yq r iofogctl_inventory.yaml 'controllers[0].iofoguser.email')
          CONTROLLER_PASSWORD=$(yq r iofogctl_inventory.yaml 'controllers[0].iofoguser.password')

          gcloud auth configure-docker --quiet
          docker run --name test-runner \
              -v "$(Agent.TempDirectory)/azure_ssh_key":/root/.ssh/id_rsa \
              -v "$(Agent.TempDirectory)/test-results":/root/test-results \
              -e CONTROLLER="${CONTROLLER_IP}:51121" \
              -e CONTROLLER_EMAIL="${CONTROLLER_EMAIL}" \
              -e CONTROLLER_PASSWORD="${CONTROLLER_PASSWORD}" \
              -e AGENTS="${AGENT_USER}@${AGENT_HOST}:${AGENT_PORT}" \
              gcr.io/focal-freedom-236620/test-runner:latest
          ls "$(Agent.TempDirectory)/test-results"
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop'
        displayName: 'run tests'

      # Publish Test Results
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)'
        displayName: 'Publish Test Results'
