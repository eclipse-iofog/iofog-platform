trigger:
- master
- develop

pool:
  vmImage: 'ubuntu-16.04'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '2.7'
    architecture: 'x64'

- script: |
    pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install Python requirements'

#- script: |
#    python cli.py up iofog --local
#  displayName: 'Deploy ioFog locally'

- script: |
    echo $(gcp.svcacc) | docker login -u _json_key --password-stdin https://gcr.io
  displayName: 'Docker connect to Registry'

- script: |
    sed -i "s|controller\:.*|controller: \"$(images.controller)\"|g" plugins/iofog/config.yml
    sed -i "s|connector\:.*|connector: \"$(images.connector)\"|g" plugins/iofog/config.yml
    sed -i "s|scheduler\:.*|scheduler: \"$(images.scheduler)\"|g" plugins/iofog/config.yml
    sed -i "s|operator\:.*|operator: \"$(images.operator)\"|g" plugins/iofog/config.yml
    sed -i "s|kubelet\:.*|kubelet: \"$(images.kubelet)\"|g" plugins/iofog/config.yml
    sed -i "s|runner\:.*|runner: \"$(images.runner)\"|g" plugins/iofog/config.yml
    cat plugins/iofog/config.yml
  displayName: 'Set ioFog images'

- script: |
    echo $(gcp.svc) > plugins/gcp/creds/svcacc.json
    cat plugins/gcp/creds/svcacc.json
    python cli.py up gcp --bootstrap=true
  displayName: 'Deploy GCP Cluster and Agents'

- script: |
    python cli.py up iofog --bootstrap=true
  displayName: 'Deploy ioFog Kubernetes and ioFog Agents'

- script: |
    python cli.py up weather
    python cli.py test weather
  displayName: 'Test Kubernetes APIs'

- script: |
    python cli.py test iofog
  displayName: 'Test ioFog APIs'

- script: |
    python cli.py down gcp
  displayName: 'Tear GCP down'
  condition: always()