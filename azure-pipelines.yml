variables:
  group: 'pipelines'

pool:
  vmImage: 'ubuntu-16.04'

steps:
- script: |
    echo $(iofogctlPackageCloudToken)
    curl -s https://$(iofogctlPackageCloudToken):@packagecloud.io/install/repositories/iofog/iofogctl-snapshots/script.deb.sh | sudo bash
    sudo apt-get install iofogctl
    iofogctl version
  displayName: 'Install iofogctl'

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  inputs:
    terraformVersion: 0.11.14
  displayName: 'Install Terraform'

- task: DownloadSecureFile@1
  displayName: 'Download secure file for azure to access gcp'
  inputs:
    secureFile: 'azure-gcp.json'

- task: DownloadSecureFile@1
  inputs:
    secureFile: packet.token
  displayName: 'Download vars file for terraform'

- script: |
    echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    sudo apt-get update && sudo apt-get install google-cloud-sdk

    # set env var GOOGLE_APPLICATION_CREDENTIALS for terraform to pick up for GCP authentication
    echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(Agent.TempDirectory)/azure-gcp.json"
  displayName: 'Install gcloud'

- script: |
    gcloud --quiet auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    gcloud --quiet config set project focal-freedom-236620
  displayName: 'Init gcloud'

- task: DownloadSecureFile@1 
  inputs:
    secureFile: 'azure_ssh_key'
  displayName: 'Download secure file for ssh access for agents'

- task: DownloadSecureFile@1
  inputs:
    secureFile: packet.token
  displayName: 'Download secure file for packet provider authentication'

- task: DownloadSecureFile@1
  inputs:
    secureFile: develop.tfvars
  displayName: 'Download terraform vars file for develop'

- script: |
    echo 'change ssh key file permissions'
    chmod 400 $(Agent.TempDirectory)/azure_ssh_key
    echo 'move packet file to appropriate directory'
    cp $(Agent.TempDirectory)/packet.token $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/packet.token
    echo 'Running Terraform init...'
    terraform init
  workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop'
  displayName: 'Terraform Init'

- script: |
    gcloud container clusters get-credentials develop --region us-west1
    if [ $? -eq 0 ]; then
        echo 'Running Terraform destroy...'
        terraform destroy -var-file=$(Agent.TempDirectory)/develop.tfvars -var ssh_key=$(Agent.TempDirectory)/azure -auto-approve
    else
        echo 'No develop cluster found'
    fi
  workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop'
  displayName: 'Terraform Destroy if cluster exists'

- script: |
    echo 'set package cloud token as env var needed for agent installation from snapshots'
    export PACKAGE_CLOUD_TOKEN=$(agentPackageCloudToken)
    
    echo 'Running Terraform apply...'
    terraform apply -var-file=$(Agent.TempDirectory)/develop.tfvars -var 'ssh_key=$(Agent.TempDirectory)/azure_ssh_key' -var 'iofogUser_password=$(iofogUserPasswordDevelop)' -auto-approve
  workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop'
  displayName: 'Terraform Apply'

- task: DownloadSecureFile@1
  displayName: 'Download secure file - healthcare microservice app config'
  inputs:
    secureFile: 'develop-msv-config.yaml'

- script: |
    python3 ./$(System.DefaultWorkingDirectory)/infrastructure/ansible/scripts/setup.py --config $(Agent.TempDirectory)/develop-msv-config.yaml'
  displayName: 'Deploy microservice'