trigger:
  branches:
    include:
      - develop
  paths:
    exclude:
      - README.md

pr: none

variables:
  group: 'pipelines'

jobs:
  - job: Demo
    dependsOn: Platform
    pool:
      vmImage: 'Ubuntu-16.04'

    steps:
      - task: DownloadSecureFile@1
        displayName: 'Download secure file - healthcare microservice app config'
        inputs:
          secureFile: 'develop-msv-config.yaml'

      # Installation will fail if develop environment is not up and running
      - script: |
          iofogctl get all
          iofogctl -q -v deploy application -f  $(Agent.TempDirectory)/develop-msv-config.yaml
        displayName: 'Deploy health app to develop'

  - job: Platform
    pool:
      name: 'GCP Ubuntu 1604'

    steps:
      - task: DownloadSecureFile@1
        displayName: 'Download secure file for azure to access gcp'
        inputs:
          secureFile: 'azure-gcp.json'

      - task: DownloadSecureFile@1
        displayName: 'Download packet token for terraform'
        inputs:
          secureFile: packet.token

      - task: DownloadSecureFile@1
        displayName: 'Download secure file for ssh access for agents'
        inputs:
          secureFile: 'azure_ssh_key'

      - task: DownloadSecureFile@1
        displayName: 'Download terraform vars file for develop'
        inputs:
          secureFile: develop.tfvars

      - script: |
          . ~/.profile
          ./bootstrap.sh --gcloud-service-account $(Agent.TempDirectory)/azure-gcp.json
          . ~/.profile
          echo "##vso[task.setvariable variable=GOPATH]${GOPATH}"
          echo "##vso[task.setvariable variable=PATH]${PATH}"

          gcloud --quiet config set project focal-freedom-236620
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(Agent.TempDirectory)/azure-gcp.json"
        displayName: 'Setup tools and gcloud credentials'

      - script: |
          cp $(Agent.TempDirectory)/packet.token $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/packet.token
          cp $(Agent.TempDirectory)/azure_ssh_key ~/azure_ssh_key
          chmod 400 ~/azure_ssh_key
        displayName: 'Copy secret files'

      - script: |
          terraform init
        displayName: 'Init terraform'
        workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop

      - script: |
          terraform show
          terraform destroy -var-file=$(Agent.TempDirectory)/develop.tfvars -auto-approve
          RET=$?
          terraform show
          exit $RET
        displayName: 'Destroy existing infrastructure'
        continueOnError: 'true'
        workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop

      - script: |
          export GOPATH=$HOME/go
          export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
          export PACKET_AUTH_TOKEN=$(cat ../packet.token)
          terraform show
          terraform apply -var-file=$(Agent.TempDirectory)/develop.tfvars \
                          -var 'controller_image=$(controller_image)' \
                          -var 'connector_image=$(connector_image)' \
                          -var 'operator_image=$(operator_image)' \
                          -var 'kubelet_image=$(kubelet_image)' \
                          -var 'agent_repo=$(tf_agent_repo)' \
                          -var 'agent_version=$(tf_agent_version)' -auto-approve -parallelism=1
          RET=$?
          terraform show
          echo
          echo "Resources deployed:"
          echo
          kubectl get all -n iofog -o wide
          exit $RET
        displayName: 'Deploy infrastructure'
        workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop
        env:
          PACKAGE_CLOUD_TOKEN: $(agentPackageCloudToken)
        continueOnError: 'true'

      - script: |
          cat iofogctl_inventory.yaml
          mkdir "$(Agent.TempDirectory)/test-results"

          CONTROLLER_IP=$(sed -n 's/.*kubecontrollerip: "\([0-9.]*\)"/\1/p' iofogctl_inventory.yaml)
          AGENT_USER=$(cat iofogctl_inventory.yaml | docker run -i --rm evns/yq 'agents[0].user')
          AGENT_HOST=$(cat iofogctl_inventory.yaml | docker run -i --rm evns/yq 'agents[0].host')
          AGENT_PORT=$(cat iofogctl_inventory.yaml | docker run -i --rm evns/yq 'agents[0].port')
          CONTROLLER_EMAIL=$(cat iofogctl_inventory.yaml | docker run -i --rm evns/yq 'controllers[0].iofoguser.email')
          CONTROLLER_PASSWORD=$(cat iofogctl_inventory.yaml | docker run -i --rm evns/yq 'controllers[0].iofoguser.password')

          gcloud auth configure-docker --quiet
          sudo docker run --name test-runner \
              -v "$(Agent.TempDirectory)/azure_ssh_key":/root/.ssh/id_rsa \
              -v "$(Agent.TempDirectory)/test-results":/test-results \
              -e CONTROLLER="${CONTROLLER_IP}:51121" \
              -e CONTROLLER_EMAIL="${CONTROLLER_EMAIL}" \
              -e CONTROLLER_PASSWORD="${CONTROLLER_PASSWORD}" \
              -e AGENTS="${AGENT_USER}@${AGENT_HOST}:${AGENT_PORT}" \
              gcr.io/focal-freedom-236620/test-runner:latest
          ls "$(Agent.TempDirectory)/test-results"
        workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/environments_gke/develop'
        displayName: 'run tests'

      # Publish Test Results
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'TEST-*.xml'
          searchFolder: '$(Agent.TempDirectory)/test-results'
        displayName: 'Publish Test Results'
